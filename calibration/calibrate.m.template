function [] = calibrate()

start_params = [__VARIABLE_VALUES_HERE__];
% params list: __VARIABLE_NAMES_HERE__

% set the log's filename
log_fn = 'log';

% read in the experimentally observed values
real_concs = csvread('data/obs.csv');

function [] = log_time()
    now_clock = clock;
    s = sprintf('%s %i:%i', date, now_clock(4), now_clock(5));

    fh = fopen(log_fn, 'a');
    fprintf(fh, '%s\n', s);
    fclose(fh);
end

function [d] = objective_f(params)
    % please note date and time (and params) in the ship's log.  --Spock
    log_time();
    dlmwrite(log_fn, params, '-append');

    % convert params into a cell
    params_cell = num2cell(params);

    % convert params array into a bunch of variables
    [__VARIABLE_NAMES_HERE__] = deal(params_cell{:});

    % get the output of the model
    [time_slices, concs_history, rates_history] = run(__VARIABLE_NAMES_HERE__);

    % compare the output with the observed stuff; use only colums 1=oxygen, 3=nitrate, and 5=sulfate
    final_concs = squeeze(concs_history(end, :, :));
    model_concs = final_concs(:, [1 3 5]);

    % compute the objective function: the sum of the square of differences divided by experimental value
    % (cf. chi-square statistic)
    d = sum(sum(((real_concs - model_concs) .^ 2) ./ real_concs));

    log_time();
    dlmwrite(log_fn, d, '-append');
end

% start the log
fh = fopen(log_fn, 'w');
fprintf(fh, 'starting calibration...');
fclose(fh);
log_time();

% run the simulation
[final_params, fval, exitflag, output] = fminsearch(@objective_f, start_params);

% record completion
log_time();
fh = fopen(fn, 'a');
fprintf(fh, 'finished!');
fprintf(fh, 'function value: %g\n', fval);
fprintf(fh, 'exit flag: %i\n', exitflag);
fprintf(fh, 'iterations: %i\nfuncCount: %i\nalgorithm: %s\nmessage: %s', output.iterations, output.funcCount, output.algorithm, output.message);
fprintf(fh, 'final params vector:\n');
fclose(fh);

dlmwrite(log_fn, final_params);

end
