function [] = calibrate()

start_params = [__INITIAL_VARIED_VALUES__];
% varied parameters: __VARIED_NAMES__
% number of params: __N_VARIED__

% specify the objective function to be used
method = __METHOD__;

% set some internal parameters
log_fn = 'log/log.txt';
param_precision = 10;
objective_precision = 20;
concs_precision = 10;
rates_precision = 10;

step = 0;

% make sure the lake bin path is included
path(path, '../bin');

% read in the experimentally observed values
% compute the shapes, whether they get used or not
real_concs = csvread('data/obs.csv');
real_concs_shapes = normc(real_concs);

real_rates = csvread('data/key_otus.csv');
real_rates_shapes = normc(real_rates);

function [] = log_time(n)
    now_clock = clock;
    s = sprintf('step %i @ %s %i:%i', n, date, now_clock(4), now_clock(5));

    fh = fopen(log_fn, 'a');
    fprintf(fh, '%s\n', s);
    fclose(fh);
end

function [d] = objective_f(params)
    % convert params into a cell
    params_cell = num2cell(params);

    % convert params array into a bunch of variables
    [__VARIED_NAMES__] = deal(params_cell{:});

    % "Please note the date and time [and params] in the ship's log."  --Spock
    % keep track of the list of params being varied as well as the entire list of parameters
    log_time(step);
    dlmwrite(log_fn, params, '-append', 'precision', param_precision);
    dlmwrite(log_fn, [__CALL_LIST__], '-append', 'precision', param_precision);

    % get the output of the model
    [time_slices, concs_history, rates_history] = lake(__CALL_LIST__);

    % pull out the final concs and rates to be reported to the user and delivered
    % to the objective function
    final_concs = squeeze(concs_history(end, :, :));
    final_rates = squeeze(rates_history(end, :, :));

    % for concs, use only colums 1=oxygen, 3=nitrate, and 5=sulfate
    % for rates, use only the predicted columns 2--10
    model_concs = final_concs(:, [1 3 5]);
    model_rates = final_rates(:, 2:10);

    % log the concs and rates from this step
    concs_fn = sprintf('log/concs_%i.csv', step);
    dlmwrite(concs_fn, final_concs, 'precision', concs_precision);
    rates_fn = sprintf('log/rates_%i.csv', step);
    dlmwrite(rates_fn, final_rates, 'precision', rates_precision);

    % compute two values, depending on the method chosen:
    % d -- the output from the function; a scalar for fmincon but a vector for lsqnonlin
    % o -- a value to be pasted in the log; a scalar for both
    if strcmp(method, 'conc')
        % compute the objective function: the sum of the square of differences divided by experimental value
        % (cf. chi-square statistic)
        d = sum(sum(((real_concs - model_concs) .^ 2) ./ real_concs));
        o = d;
    elseif strcmp(method, 'otu')
        % compute the shapes of the concs and rates
        final_concs_shapes = normc(model_concs);
        final_rates_shapes = normc(normr(model_rates));

        d = horzcat(final_concs_shapes - real_concs_shapes, final_rates_shapes - real_rates_shapes);
        o = sum(d(:) .^ 2);
    end

    % report a function value to the log
    log_time(step);
    dlmwrite(log_fn, o, '-append', 'precision', objective_precision);

    step = step + 1;
end

% start the log
fh = fopen(log_fn, 'w');
fprintf(fh, 'starting calibration...\n');
fclose(fh);
log_time(step);

% run the simulation. use list of lower and upper bounds from config file
if strcmp(method, 'conc')
    [final_params, fval, exitflag, output] = fmincon(@objective_f, start_params, [], [], [], [], [__LBS__], [__UBS__]);
elseif strcmp(method, 'otu')
    [final_params, fval, residual, exitflag, output] = lsqnonlin(@objective_f, start_params, [__LBS__], [__UBS__]);
end

% record completion
log_time(step);
fh = fopen(log_fn, 'a');
fprintf(fh, 'finished!');
fprintf(fh, 'function value: %g\n', fval);
fprintf(fh, 'exit flag: %i\n', exitflag);
fprintf(fh, 'iterations: %i\nfuncCount: %i\nalgorithm: %s\nmessage: %s', output.iterations, output.funcCount, output.algorithm, output.message);
fprintf(fh, 'final params vector:\n');
fclose(fh);

dlmwrite(log_fn, final_params, '-append', 'precision', param_precision);

end
